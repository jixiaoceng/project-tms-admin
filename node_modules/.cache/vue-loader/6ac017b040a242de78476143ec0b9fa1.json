{"remainingRequest":"/Users/jifangli/Documents/work/project-tms-admin/node_modules/_vue-loader@15.7.1@vue-loader/lib/index.js??vue-loader-options!/Users/jifangli/Documents/work/project-tms-admin/src/components/ThemePicker/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jifangli/Documents/work/project-tms-admin/src/components/ThemePicker/index.vue","mtime":1563876622355},{"path":"/Users/jifangli/Documents/work/project-tms-admin/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jifangli/Documents/work/project-tms-admin/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jifangli/Documents/work/project-tms-admin/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jifangli/Documents/work/project-tms-admin/node_modules/_vue-loader@15.7.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getStorage } from '@/utils/handleStorage'\n\nconst version = require('element-ui/package.json').version // element-ui version from node_modules\n// 颜色必须是主题的颜色\nconst ORIGINAL_THEME = '#409EFF' // default color\n\nimport { mapMutations } from 'vuex'\n\nexport default {\n  data() {\n    return {\n      chalk: '', // content of theme-chalk css\n      theme: '#3498DB'\n    }\n  },\n  watch: {\n    theme(val, oldVal) {\n      this.changeColor(val, oldVal)\n\n      // 换肤成功提示\n      this.$message({\n        message: '换肤成功',\n        type: 'success'\n      })\n    }\n  },\n  created() {\n    this.changeColor(getStorage('theme'), ORIGINAL_THEME)\n  },\n  methods: {\n    /**\n     * 将样式文件里的旧主题颜色变为新主题颜色\n     * @param style 样式文件\n     * @param oldCluster 旧主题样式集群\n     * @param newCluster 新主题样式集群\n     */\n    updateStyle(style, oldCluster, newCluster) {\n      let newStyle = style\n      oldCluster.forEach((color, index) => {\n        newStyle = newStyle.replace(new RegExp(color, 'ig'), newCluster[index])\n      })\n      return newStyle\n    },\n    // 获取线上的样式\n    /**\n     * 获取线上的样式\n     * @param url 文件地址\n     * @param callback 回调\n     * @param variable 样式\n     */\n    getCSSString(url, callback, variable) {\n      const xhr = new XMLHttpRequest()\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n          this[variable] = xhr.responseText.replace(/@font-face{[^}]+}/, '')\n          callback()\n        }\n      }\n      xhr.open('GET', url)\n      xhr.send()\n    },\n    /**\n     * 获取主题集群\n     * @param theme 主题颜色\n     */\n    getThemeCluster(theme) {\n      const tintColor = (color, tint) => {\n        let red = parseInt(color.slice(0, 2), 16)\n        let green = parseInt(color.slice(2, 4), 16)\n        let blue = parseInt(color.slice(4, 6), 16)\n\n        if (tint === 0) { // when primary color is in its rgb space\n          return [red, green, blue].join(',')\n        } else {\n          red += Math.round(tint * (255 - red))\n          green += Math.round(tint * (255 - green))\n          blue += Math.round(tint * (255 - blue))\n\n          red = red.toString(16)\n          green = green.toString(16)\n          blue = blue.toString(16)\n\n          return `#${red}${green}${blue}`\n        }\n      }\n\n      const shadeColor = (color, shade) => {\n        let red = parseInt(color.slice(0, 2), 16)\n        let green = parseInt(color.slice(2, 4), 16)\n        let blue = parseInt(color.slice(4, 6), 16)\n\n        red = Math.round((1 - shade) * red)\n        green = Math.round((1 - shade) * green)\n        blue = Math.round((1 - shade) * blue)\n\n        red = red.toString(16)\n        green = green.toString(16)\n        blue = blue.toString(16)\n\n        return `#${red}${green}${blue}`\n      }\n\n      const clusters = [theme]\n      for (let i = 0; i <= 9; i++) {\n        clusters.push(tintColor(theme, Number((i / 10).toFixed(2))))\n      }\n      clusters.push(shadeColor(theme, 0.1))\n      return clusters\n    },\n    changeColor(val, oldVal) {\n      if (typeof val !== 'string') return\n      this.changeThemeColor(val)\n      // 新的样式集群\n      const themeCluster = this.getThemeCluster(val.replace('#', ''))\n      // 前面旧的样式集群\n      const originalCluster = this.getThemeCluster(oldVal.replace('#', ''))\n\n      // 生成回调函数\n      const getHandler = (variable, id) => {\n        return () => {\n          const originalCluster = this.getThemeCluster(ORIGINAL_THEME.replace('#', ''))\n          const newStyle = this.updateStyle(this[variable], originalCluster, themeCluster)\n\n          // 将新的样式放到一个id为id的style标签里，用来覆盖原来的样式文件，以达到换肤目的\n          let styleTag = document.getElementById(id)\n          if (!styleTag) {\n            styleTag = document.createElement('style')\n            styleTag.setAttribute('id', id)\n            document.head.appendChild(styleTag)\n          }\n          styleTag.innerText = newStyle\n        }\n      }\n\n      // 回调函数\n      const chalkHandler = getHandler('chalk', 'chalk-style')\n\n      // 如果从线上获取过样式文件，需要去获取，若以获取，只需要去重新赋值\n      if (!this.chalk) {\n        const url = `https://unpkg.com/element-ui@${version}/lib/theme-chalk/index.css`\n        this.getCSSString(url, chalkHandler, 'chalk')\n      } else {\n        chalkHandler()\n      }\n\n      // 这段代码目的不明确，单从代码来看：如果前面没有样式如果没有写入style标签，这里重新填入\n      const styles = [].slice.call(document.querySelectorAll('style'))\n        .filter(style => {\n          const text = style.innerText\n          return new RegExp(oldVal, 'i').test(text) && !/Chalk Variables/.test(text)\n        })\n      styles.forEach(style => {\n        const { innerText } = style\n        if (typeof innerText !== 'string') return\n        style.innerText = this.updateStyle(innerText, originalCluster, themeCluster)\n      })\n    },\n    ...mapMutations({\n      'changeThemeColor': 'CHANGE_THEME_COLOR'\n    })\n  }\n}\n",null]}