{"remainingRequest":"/Users/jifangli/Documents/work/project-tms-admin/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js!/Users/jifangli/Documents/work/project-tms-admin/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--0-0!/Users/jifangli/Documents/work/project-tms-admin/node_modules/_vue-loader@15.7.1@vue-loader/lib/index.js??vue-loader-options!/Users/jifangli/Documents/work/project-tms-admin/src/components/ThemePicker/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jifangli/Documents/work/project-tms-admin/src/components/ThemePicker/index.vue","mtime":1563876622355},{"path":"/Users/jifangli/Documents/work/project-tms-admin/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jifangli/Documents/work/project-tms-admin/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jifangli/Documents/work/project-tms-admin/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jifangli/Documents/work/project-tms-admin/node_modules/_vue-loader@15.7.1@vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jifangli/Documents/work/project-tms-admin/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jifangli/Documents/work/project-tms-admin/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jifangli/Documents/work/project-tms-admin/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jifangli/Documents/work/project-tms-admin/node_modules/_vue-loader@15.7.1@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/jifangli/Documents/work/project-tms-admin/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es7.object.get-own-property-descriptors\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.regexp.constructor\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _defineProperty2 = _interopRequireDefault(require(\"/Users/jifangli/Documents/work/project-tms-admin/node_modules/@babel/runtime/helpers/defineProperty\"));\n\nvar _handleStorage = require(\"@/utils/handleStorage\");\n\nvar _vuex = require(\"vuex\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar version = require('element-ui/package.json').version; // element-ui version from node_modules\n// 颜色必须是主题的颜色\n\n\nvar ORIGINAL_THEME = '#409EFF'; // default color\n\nvar _default = {\n  data: function data() {\n    return {\n      chalk: '',\n      // content of theme-chalk css\n      theme: '#3498DB'\n    };\n  },\n  watch: {\n    theme: function theme(val, oldVal) {\n      this.changeColor(val, oldVal); // 换肤成功提示\n\n      this.$message({\n        message: '换肤成功',\n        type: 'success'\n      });\n    }\n  },\n  created: function created() {\n    this.changeColor((0, _handleStorage.getStorage)('theme'), ORIGINAL_THEME);\n  },\n  methods: _objectSpread({\n    /**\n     * 将样式文件里的旧主题颜色变为新主题颜色\n     * @param style 样式文件\n     * @param oldCluster 旧主题样式集群\n     * @param newCluster 新主题样式集群\n     */\n    updateStyle: function updateStyle(style, oldCluster, newCluster) {\n      var newStyle = style;\n      oldCluster.forEach(function (color, index) {\n        newStyle = newStyle.replace(new RegExp(color, 'ig'), newCluster[index]);\n      });\n      return newStyle;\n    },\n    // 获取线上的样式\n\n    /**\n     * 获取线上的样式\n     * @param url 文件地址\n     * @param callback 回调\n     * @param variable 样式\n     */\n    getCSSString: function getCSSString(url, callback, variable) {\n      var _this = this;\n\n      var xhr = new XMLHttpRequest();\n\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n          _this[variable] = xhr.responseText.replace(/@font-face{[^}]+}/, '');\n          callback();\n        }\n      };\n\n      xhr.open('GET', url);\n      xhr.send();\n    },\n\n    /**\n     * 获取主题集群\n     * @param theme 主题颜色\n     */\n    getThemeCluster: function getThemeCluster(theme) {\n      var tintColor = function tintColor(color, tint) {\n        var red = parseInt(color.slice(0, 2), 16);\n        var green = parseInt(color.slice(2, 4), 16);\n        var blue = parseInt(color.slice(4, 6), 16);\n\n        if (tint === 0) {\n          // when primary color is in its rgb space\n          return [red, green, blue].join(',');\n        } else {\n          red += Math.round(tint * (255 - red));\n          green += Math.round(tint * (255 - green));\n          blue += Math.round(tint * (255 - blue));\n          red = red.toString(16);\n          green = green.toString(16);\n          blue = blue.toString(16);\n          return \"#\".concat(red).concat(green).concat(blue);\n        }\n      };\n\n      var shadeColor = function shadeColor(color, shade) {\n        var red = parseInt(color.slice(0, 2), 16);\n        var green = parseInt(color.slice(2, 4), 16);\n        var blue = parseInt(color.slice(4, 6), 16);\n        red = Math.round((1 - shade) * red);\n        green = Math.round((1 - shade) * green);\n        blue = Math.round((1 - shade) * blue);\n        red = red.toString(16);\n        green = green.toString(16);\n        blue = blue.toString(16);\n        return \"#\".concat(red).concat(green).concat(blue);\n      };\n\n      var clusters = [theme];\n\n      for (var i = 0; i <= 9; i++) {\n        clusters.push(tintColor(theme, Number((i / 10).toFixed(2))));\n      }\n\n      clusters.push(shadeColor(theme, 0.1));\n      return clusters;\n    },\n    changeColor: function changeColor(val, oldVal) {\n      var _this2 = this;\n\n      if (typeof val !== 'string') return;\n      this.changeThemeColor(val); // 新的样式集群\n\n      var themeCluster = this.getThemeCluster(val.replace('#', '')); // 前面旧的样式集群\n\n      var originalCluster = this.getThemeCluster(oldVal.replace('#', '')); // 生成回调函数\n\n      var getHandler = function getHandler(variable, id) {\n        return function () {\n          var originalCluster = _this2.getThemeCluster(ORIGINAL_THEME.replace('#', ''));\n\n          var newStyle = _this2.updateStyle(_this2[variable], originalCluster, themeCluster); // 将新的样式放到一个id为id的style标签里，用来覆盖原来的样式文件，以达到换肤目的\n\n\n          var styleTag = document.getElementById(id);\n\n          if (!styleTag) {\n            styleTag = document.createElement('style');\n            styleTag.setAttribute('id', id);\n            document.head.appendChild(styleTag);\n          }\n\n          styleTag.innerText = newStyle;\n        };\n      }; // 回调函数\n\n\n      var chalkHandler = getHandler('chalk', 'chalk-style'); // 如果从线上获取过样式文件，需要去获取，若以获取，只需要去重新赋值\n\n      if (!this.chalk) {\n        var url = \"https://unpkg.com/element-ui@\".concat(version, \"/lib/theme-chalk/index.css\");\n        this.getCSSString(url, chalkHandler, 'chalk');\n      } else {\n        chalkHandler();\n      } // 这段代码目的不明确，单从代码来看：如果前面没有样式如果没有写入style标签，这里重新填入\n\n\n      var styles = [].slice.call(document.querySelectorAll('style')).filter(function (style) {\n        var text = style.innerText;\n        return new RegExp(oldVal, 'i').test(text) && !/Chalk Variables/.test(text);\n      });\n      styles.forEach(function (style) {\n        var innerText = style.innerText;\n        if (typeof innerText !== 'string') return;\n        style.innerText = _this2.updateStyle(innerText, originalCluster, themeCluster);\n      });\n    }\n  }, (0, _vuex.mapMutations)({\n    'changeThemeColor': 'CHANGE_THEME_COLOR'\n  }))\n};\nexports.default = _default;",null]}