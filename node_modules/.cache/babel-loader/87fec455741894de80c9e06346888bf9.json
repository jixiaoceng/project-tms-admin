{"remainingRequest":"/Users/jifangli/Documents/work/project-tms-admin/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js!/Users/jifangli/Documents/work/project-tms-admin/node_modules/_eslint-loader@2.2.1@eslint-loader/index.js??ref--13-0!/Users/jifangli/Documents/work/project-tms-admin/src/store/modules/tagsView.js","dependencies":[{"path":"/Users/jifangli/Documents/work/project-tms-admin/src/store/modules/tagsView.js","mtime":1564044133511},{"path":"/Users/jifangli/Documents/work/project-tms-admin/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jifangli/Documents/work/project-tms-admin/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jifangli/Documents/work/project-tms-admin/node_modules/_eslint-loader@2.2.1@eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/jifangli/Documents/work/project-tms-admin/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"/Users/jifangli/Documents/work/project-tms-admin/node_modules/@babel/runtime/helpers/toConsumableArray\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"/Users/jifangli/Documents/work/project-tms-admin/node_modules/@babel/runtime/helpers/slicedToArray\"));\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nvar tagsView = {\n  state: {\n    visitedViews: [],\n    // 缓存的页面再次被请求时会走缓存\n    cachedViews: []\n  },\n  mutations: {\n    ADD_VISITED_VIEWS: function ADD_VISITED_VIEWS(state, view) {\n      if (state.visitedViews.some(function (v) {\n        return v.path === view.path;\n      })) return;\n      state.visitedViews.push(Object.assign({}, view, {\n        title: view.meta.title || 'no-name'\n      }));\n\n      if (!view.meta.noCache && view.name !== undefined) {\n        state.cachedViews.push(view.name);\n      }\n    },\n    DEL_VISITED_VIEWS: function DEL_VISITED_VIEWS(state, view) {\n      // 在浏览过的页面数组里删除当前选择的页面\n      // entries()返回一个迭代器，它返回数组的键/值对。其实就是个数组的循环\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = state.visitedViews.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _step$value = (0, _slicedToArray2.default)(_step.value, 2),\n              i = _step$value[0],\n              v = _step$value[1];\n\n          if (v.path === view.path) {\n            state.visitedViews.splice(i, 1);\n            break;\n          }\n        } // 在缓存的页面数组里删除当前选择的页面\n        // state.cachedViews就是state.cachedViews.length\n\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = state.cachedViews[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var i = _step2.value;\n\n          if (i === view.name) {\n            var index = state.cachedViews.indexOf(i);\n            state.cachedViews.splice(index, 1);\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    },\n    // 在处理上和DEL_VISITED_VIEWS相似，区别在于不是删除当前页面的路由，而是变为当前页面的路由\n    DEL_OTHERS_VIEWS: function DEL_OTHERS_VIEWS(state, view) {\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = state.visitedViews.entries()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var _step3$value = (0, _slicedToArray2.default)(_step3.value, 2),\n              i = _step3$value[0],\n              v = _step3$value[1];\n\n          if (v.path === view.path) {\n            state.visitedViews = state.visitedViews.slice(i, i + 1);\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = state.cachedViews[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var i = _step4.value;\n\n          if (i === view.name) {\n            var index = state.cachedViews.indexOf(i);\n            state.cachedViews = state.cachedViews.slice(index, index + 1);\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n    },\n    // 删除所有看过的页面和缓存的页面\n    DEL_ALL_VIEWS: function DEL_ALL_VIEWS(state) {\n      state.visitedViews = [];\n      state.cachedViews = [];\n    }\n  },\n  actions: {\n    // 删除当前选择的页面\n    delVisitedViews: function delVisitedViews(_ref, view) {\n      var commit = _ref.commit,\n          state = _ref.state;\n      return new Promise(function (resolve) {\n        commit('DEL_VISITED_VIEWS', view);\n        resolve((0, _toConsumableArray2.default)(state.visitedViews));\n      });\n    },\n    // 删除其他的页面\n    delOthersViews: function delOthersViews(_ref2, view) {\n      var commit = _ref2.commit,\n          state = _ref2.state;\n      return new Promise(function (resolve) {\n        commit('DEL_OTHERS_VIEWS', view);\n        resolve((0, _toConsumableArray2.default)(state.visitedViews));\n      });\n    }\n  }\n};\nvar _default = tagsView;\nexports.default = _default;",null]}